import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import List
import plyer
from data_models import NewsArticle
from settings import settings

logger = logging.getLogger(__name__)


class NotificationAgent:
    def __init__(self):
        self.email_configured = all([
            settings.email_user,
            settings.email_pass,
            settings.email_to
        ])

    def send_notifications(self, sentiment_agent):
        """Send desktop notifications for important news"""
        try:
            categorized = sentiment_agent.get_categorized_articles()

            # Send notifications for top positive news (max 3)
            for title in categorized['positive'][:3]:
                plyer.notification.notify(
                    title="üìà Positive Market News",
                    message=title[:100] + "..." if len(title) > 100 else title,
                    timeout=10
                )

            # Send notifications for top negative news (max 3)
            for title in categorized['negative'][:3]:
                plyer.notification.notify(
                    title="üìâ Negative Market News",
                    message=title[:100] + "..." if len(title) > 100 else title,
                    timeout=10
                )

            logger.info(
                f"Sent notifications: {len(categorized['positive'][:3])} positive, {len(categorized['negative'][:3])} negative")

        except Exception as e:
            logger.error(f"Error sending notifications: {e}")

    def send_email_report(self, sentiment_agent, articles: List[NewsArticle]) -> bool:
        """Generate and send email report in one step"""
        if not self.email_configured:
            print("‚ùå Email not configured")
            return False

        try:
            # Get categorized results
            categorized = sentiment_agent.get_categorized_articles()

            positive_count = len(categorized['positive'])
            negative_count = len(categorized['negative'])
            neutral_count = len(categorized['neutral'])
            total = positive_count + negative_count + neutral_count

            if total == 0:
                email_body = "No financial news analyzed today."
            else:
                # Create simple email content
                email_body = f"""
üìä DAILY INDIAN STOCK MARKET SENTIMENT REPORT

üìà SUMMARY:
‚Ä¢ Total Articles: {total}
‚Ä¢ Positive: {positive_count} ({positive_count/total*100:.1f}%)
‚Ä¢ Negative: {negative_count} ({negative_count/total*100:.1f}%)
‚Ä¢ Neutral: {neutral_count} ({neutral_count/total*100:.1f}%)

üî• TOP POSITIVE NEWS:
"""
                # Add positive news
                for i, title in enumerate(categorized['positive'][:5], 1):
                    email_body += f"{i}. {title}\n"

                email_body += "\n‚ö†Ô∏è TOP NEGATIVE NEWS:\n"

                # Add negative news
                for i, title in enumerate(categorized['negative'][:5], 1):
                    email_body += f"{i}. {title}\n"

                # Market outlook
                outlook = "POSITIVE" if positive_count > negative_count else "NEGATIVE" if negative_count > positive_count else "NEUTRAL"
                email_body += f"\nüìä MARKET OVERALL OUTLOOK: {outlook}\n"
                email_body += "\n---\nAutomated report generated by - SHREYA RAMRAIKA "

            # Send email
            msg = MIMEMultipart()
            msg['From'] = settings.email_user
            msg['To'] = settings.email_to
            msg['Subject'] = f"Financial Sentiment Report - {datetime.now().strftime('%Y-%m-%d')}"
            msg.attach(MIMEText(email_body, 'plain'))

            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(settings.email_user, settings.email_pass)
                server.sendmail(settings.email_user,
                                settings.email_to, msg.as_string())

            print("‚úÖ Email report sent successfully")
            return True

        except Exception as e:
            print(f"‚ùå Email failed: {e}")
            return False

    def send_all_notifications(self, sentiment_agent, articles: List[NewsArticle]):
        """Helps send notifications and email report"""
        self.send_notifications(sentiment_agent)

        print("üìß Sending email report...")
        self.send_email_report(sentiment_agent, articles)
